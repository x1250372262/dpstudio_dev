/*
 * Copyright 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dpstudio.dev.support.log.model;

import net.ymate.platform.core.beans.annotation.PropertyState;
import net.ymate.platform.core.persistence.IShardingable;
import net.ymate.platform.core.persistence.annotation.*;
import net.ymate.platform.persistence.jdbc.IDatabase;
import net.ymate.platform.persistence.jdbc.IDatabaseConnectionHolder;
import net.ymate.platform.persistence.jdbc.support.BaseEntity;

/**
 * Log generated By EntityMojo on 2020/06/30 17:17:26
 *
 * @author YMP (https://www.ymate.net/)
 */
@Entity(Log.TABLE_NAME)
public class Log extends BaseEntity<Log, String> {

    private static final long serialVersionUID = 1L;

    @Id
    @Property(name = FIELDS.ID, nullable = false, length = 32)
    @Comment("")
    @PropertyState(propertyName = FIELDS.ID)
    private String id;


    @Property(name = FIELDS.MODULE_TYPE, nullable = false, length = 4)
    @Default("0")
    @Comment("模块类型")
    @PropertyState(propertyName = FIELDS.MODULE_TYPE)
    private Integer moduleType;


    @Property(name = FIELDS.MODULE_NAME, nullable = false, length = 32)
    @Comment("模块名称")
    @PropertyState(propertyName = FIELDS.MODULE_NAME)
    private String moduleName;


    @Property(name = FIELDS.TYPE, nullable = false, length = 4)
    @Default("0")
    @Comment("日志类型")
    @PropertyState(propertyName = FIELDS.TYPE)
    private Integer type;


    @Property(name = FIELDS.ACTION, nullable = false, length = 32)
    @Comment("日志类型字符串")
    @PropertyState(propertyName = FIELDS.ACTION)
    private String action;


    @Property(name = FIELDS.RESOURCE_ID, nullable = false, length = 32)
    @Comment("日志对象id")
    @PropertyState(propertyName = FIELDS.RESOURCE_ID)
    private String resourceId;


    @Property(name = FIELDS.CREATE_USER, nullable = false, length = 32)
    @Comment("创建人")
    @PropertyState(propertyName = FIELDS.CREATE_USER)
    private String createUser;


    @Property(name = FIELDS.CREATE_TIME, nullable = false, length = 13)
    @Default("0")
    @Comment("创建时间")
    @PropertyState(propertyName = FIELDS.CREATE_TIME)
    private Long createTime;


    @Property(name = FIELDS.CONTENT, nullable = false, length = 16383)
    @Comment("内容")
    @PropertyState(propertyName = FIELDS.CONTENT)
    private String content;


    public Log() {
    }

    public Log(IDatabase dbOwner) {
        super(dbOwner);
    }


    public Log(String id, Integer moduleType, String moduleName, Integer type, String action, String resourceId, String createUser, Long createTime, String content) {
        this.id = id;
        this.moduleType = moduleType;
        this.moduleName = moduleName;
        this.type = type;
        this.action = action;
        this.resourceId = resourceId;
        this.createUser = createUser;
        this.createTime = createTime;
        this.content = content;
    }

    public Log(IDatabase dbOwner, String id, Integer moduleType, String moduleName, Integer type, String action, String resourceId, String createUser, Long createTime, String content) {
        super(dbOwner);
        this.id = id;
        this.moduleType = moduleType;
        this.moduleName = moduleName;
        this.type = type;
        this.action = action;
        this.resourceId = resourceId;
        this.createUser = createUser;
        this.createTime = createTime;
        this.content = content;
    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    public Integer getModuleType() {
        return moduleType;
    }

    public void setModuleType(Integer moduleType) {
        this.moduleType = moduleType;
    }

    public String getModuleName() {
        return moduleName;
    }

    public void setModuleName(String moduleName) {
        this.moduleName = moduleName;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public String getResourceId() {
        return resourceId;
    }

    public void setResourceId(String resourceId) {
        this.resourceId = resourceId;
    }

    public String getCreateUser() {
        return createUser;
    }

    public void setCreateUser(String createUser) {
        this.createUser = createUser;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public LogBuilder bind() {
        return new LogBuilder(this);
    }

    public static LogBuilder builder() {
        return new LogBuilder();
    }

    public static LogBuilder builder(IDatabase dbOwner) {
        return new LogBuilder(dbOwner);
    }

    public static class LogBuilder {

        private final Log targetEntity;

        public LogBuilder() {
            targetEntity = new Log();
        }

        public LogBuilder(IDatabase dbOwner) {
            targetEntity = new Log(dbOwner);
        }

        public LogBuilder(Log targetEntity) {
            this.targetEntity = targetEntity;
        }

        public Log build() {
            return targetEntity;
        }

        public IDatabaseConnectionHolder connectionHolder() {
            return targetEntity.getConnectionHolder();
        }

        public LogBuilder connectionHolder(IDatabaseConnectionHolder connectionHolder) {
            targetEntity.setConnectionHolder(connectionHolder);
            return this;
        }

        public String dataSourceName() {
            return targetEntity.getDataSourceName();
        }

        public LogBuilder dataSourceName(String dataSourceName) {
            targetEntity.setDataSourceName(dataSourceName);
            return this;
        }

        public IShardingable shardingable() {
            return targetEntity.getShardingable();
        }

        public LogBuilder shardingable(IShardingable shardingable) {
            targetEntity.setShardingable(shardingable);
            return this;
        }


        public String id() {
            return targetEntity.getId();
        }

        public LogBuilder id(String id) {
            targetEntity.setId(id);
            return this;
        }

        public Integer moduleType() {
            return targetEntity.getModuleType();
        }

        public LogBuilder moduleType(Integer moduleType) {
            targetEntity.setModuleType(moduleType);
            return this;
        }

        public String moduleName() {
            return targetEntity.getModuleName();
        }

        public LogBuilder moduleName(String moduleName) {
            targetEntity.setModuleName(moduleName);
            return this;
        }

        public Integer type() {
            return targetEntity.getType();
        }

        public LogBuilder type(Integer type) {
            targetEntity.setType(type);
            return this;
        }

        public String action() {
            return targetEntity.getAction();
        }

        public LogBuilder action(String action) {
            targetEntity.setAction(action);
            return this;
        }

        public String resourceId() {
            return targetEntity.getResourceId();
        }

        public LogBuilder resourceId(String resourceId) {
            targetEntity.setResourceId(resourceId);
            return this;
        }

        public String createUser() {
            return targetEntity.getCreateUser();
        }

        public LogBuilder createUser(String createUser) {
            targetEntity.setCreateUser(createUser);
            return this;
        }

        public Long createTime() {
            return targetEntity.getCreateTime();
        }

        public LogBuilder createTime(Long createTime) {
            targetEntity.setCreateTime(createTime);
            return this;
        }

        public String content() {
            return targetEntity.getContent();
        }

        public LogBuilder content(String content) {
            targetEntity.setContent(content);
            return this;
        }
    }

    public interface FIELDS {
        String ID = "id";
        String MODULE_TYPE = "module_type";
        String MODULE_NAME = "module_name";
        String TYPE = "type";
        String ACTION = "action";
        String RESOURCE_ID = "resource_id";
        String CREATE_USER = "create_user";
        String CREATE_TIME = "create_time";
        String CONTENT = "content";
    }

    public static final String TABLE_NAME = "log";
}
