/*
 * Copyright 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dpstudio.dev.doc;

import com.dpstudio.dev.doc.bean.ApiResult;
import com.dpstudio.dev.doc.converter.TagConverterRegister;
import com.dpstudio.dev.doc.impl.ApiHelper;
import com.dpstudio.dev.doc.impl.DefaultDocConfig;
import com.dpstudio.dev.doc.impl.SourceFileManager;
import net.ymate.platform.core.*;
import net.ymate.platform.core.module.IModule;
import net.ymate.platform.core.module.IModuleConfigurer;
import net.ymate.platform.core.module.impl.DefaultModuleConfigurer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Doc generated By ModuleMojo on 2020/07/07 15:44
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class Doc implements IModule, IDoc {

    private static volatile IDoc instance;

    private IApplication owner;

    private IDocConfig config;

    private boolean initialized;

    public static IDoc get() {
        IDoc inst = instance;
        if (inst == null) {
            synchronized (Doc.class) {
                inst = instance;
                if (inst == null) {
                    instance = inst = YMP.get().getModuleManager().getModule(Doc.class);
                }
            }
        }
        return inst;
    }

    public Doc() {
    }

    public Doc(IDocConfig config) {
        this.config = config;
    }

    @Override
    public String getName() {
        return MODULE_NAME;
    }

    @Override
    public void initialize(IApplication owner) throws Exception {
        if (!initialized) {
            //
            YMP.showVersion("Initializing dpstudio-dev-doc-doc-${version}", new Version(1, 0, 0, Doc.class, Version.VersionType.Alpha));
            //
            this.owner = owner;
            if (config == null) {
                IApplicationConfigureFactory configureFactory = owner.getConfigureFactory();
                if (configureFactory != null) {
                    IApplicationConfigurer configurer = configureFactory.getConfigurer();
                    IModuleConfigurer moduleConfigurer = configurer == null ? null : configurer.getModuleConfigurer(MODULE_NAME);
                    if (moduleConfigurer != null) {
                        config = DefaultDocConfig.create(configureFactory.getMainClass(), moduleConfigurer);
                    } else {
                        config = DefaultDocConfig.create(configureFactory.getMainClass(), DefaultModuleConfigurer.createEmpty(MODULE_NAME));
                    }
                }
                if (config == null) {
                    config = DefaultDocConfig.defaultConfig();
                }
            }
            if (!config.isInitialized()) {
                config.initialize(this);
            }
            if (config.isEnabled()) {
                TagConverterRegister.me().register();
                SourceFileManager.me().registerFile(config);
                ApiHelper.me().createDoc(config);
            }
            initialized = true;
        }
    }

    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public void close() throws Exception {
        if (initialized) {
            initialized = false;
            //
            if (config.isEnabled()) {
                // TODO What to do?
            }
            //
            config = null;
            owner = null;
        }
    }

    @Override
    public IApplication getOwner() {
        return owner;
    }

    @Override
    public IDocConfig getConfig() {
        return config;
    }

    @Override
    public ApiResult getDoc() throws Exception {
        return ApiHelper.me().apiResult();
    }
}
