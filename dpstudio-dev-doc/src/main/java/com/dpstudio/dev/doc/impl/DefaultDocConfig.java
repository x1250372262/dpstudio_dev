/*
 * Copyright 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dpstudio.dev.doc.impl;

import com.dpstudio.dev.doc.IDoc;
import com.dpstudio.dev.doc.IDocConfig;
import com.dpstudio.dev.doc.annotation.DocConf;
import net.ymate.platform.commons.util.ClassUtils;
import net.ymate.platform.core.configuration.IConfigReader;
import net.ymate.platform.core.module.IModuleConfigurer;

/**
 * DefaultDocConfig generated By ModuleMojo on 2020/07/07 15:44
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class DefaultDocConfig implements IDocConfig {

    private boolean enabled = true;

    private boolean mockEnabled = true;

    /**
     * 文档标题
     */
    private String title;

    /**
     * 代码源码路径用逗号(,)分割
     */
    private String sourcePath;

    /**
     * java文件包含名称 用逗号(,)分割
     */
    private String fileName;

    /**
     * 文档版本
     */
    private String version;

    /**
     * 接口路径
     */
    private String host;

    private boolean initialized;

    public static DefaultDocConfig defaultConfig() {
        return builder().build();
    }

    public static DefaultDocConfig create(IModuleConfigurer moduleConfigurer) {
        return new DefaultDocConfig(null, moduleConfigurer);
    }

    public static DefaultDocConfig create(Class<?> mainClass, IModuleConfigurer moduleConfigurer) {
        return new DefaultDocConfig(mainClass, moduleConfigurer);
    }

    public static Builder builder() {
        return new Builder();
    }

    private DefaultDocConfig() {
    }

    private DefaultDocConfig(Class<?> mainClass, IModuleConfigurer moduleConfigurer) {
        IConfigReader configReader = moduleConfigurer.getConfigReader();
        //
        DocConf confAnn = mainClass == null ? null : mainClass.getAnnotation(DocConf.class);
        enabled = configReader.getBoolean(ENABLED, confAnn == null || confAnn.enabled());
        mockEnabled = configReader.getBoolean(MOCK_ENABLED, confAnn == null || confAnn.mockEnabled());
        sourcePath = configReader.getString(SOURCE_PATH, confAnn != null ? confAnn.sourcePath() : "");
        fileName = configReader.getString(FILE_NAME, confAnn != null ? confAnn.fileName() : "");
        version = configReader.getString(VERSION, confAnn != null ? confAnn.version() : "1.0.0");
        title = configReader.getString(TITLE, confAnn != null ? confAnn.title() : "梦祥文档");
        host = configReader.getString(HOST, confAnn != null ? confAnn.host() : "");
    }

    @Override
    public void initialize(IDoc owner) throws Exception {
        if (!initialized) {
            if (enabled) {
                // TODO What to do?
            }
            initialized = true;
        }
    }

    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    @Override
    public boolean isMockEnabled() {
        return mockEnabled;
    }

    @Override
    public String title() {
        return title;
    }

    @Override
    public String sourcePath() {
        return sourcePath;
    }

    @Override
    public String fileName() {
        return fileName;
    }

    @Override
    public String version() {
        return version;
    }

    @Override
    public String host() {
        return host;
    }

    public void setTitle(String title) {
        if (!initialized) {
            this.title = title;
        }
    }

    public void setSourcePath(String sourcePath) {
        if (!initialized) {
            this.sourcePath = sourcePath;
        }
    }

    public void setFileName(String fileName) {
        if (!initialized) {
            this.fileName = fileName;
        }
    }

    public void setVersion(String version) {
        if (!initialized) {
            this.version = version;
        }
    }

    public void setHost(String host) {
        if (!initialized) {
            this.host = host;
        }
    }

    public void setEnabled(boolean enabled) {
        if (!initialized) {
            this.enabled = enabled;
        }
    }

    public static final class Builder {

        private final DefaultDocConfig config = new DefaultDocConfig();

        private Builder() {
        }

        public Builder enabled(boolean enabled) {
            config.setEnabled(enabled);
            return this;
        }

        public Builder title(String title) {
            config.setTitle(title);
            return this;
        }

        public Builder sourcePath(String sourcePath) {
            config.setSourcePath(sourcePath);
            return this;
        }

        public Builder fileName(String fileName) {
            config.setFileName(fileName);
            return this;
        }

        public Builder version(String version) {
            config.setVersion(version);
            return this;
        }

        public Builder host(String host) {
            config.setHost(host);
            return this;
        }

        public DefaultDocConfig build() {
            return config;
        }
    }
}