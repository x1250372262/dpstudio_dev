package juncheng.mall.order.apiservice.support;

import com.dpstudio.dev.core.CommonResult;
import com.dpstudio.dev.mimiprogram.IWxMimiProgramPayHandler;
import net.ymate.framework.commons.MathCalcHelper;
import net.ymate.framework.core.util.WebUtils;
import net.ymate.payment.wxpay.IWxPay;
import net.ymate.payment.wxpay.base.WxPayAccountMeta;
import net.ymate.payment.wxpay.base.WxPayNotifyResponse;
import net.ymate.payment.wxpay.request.WxPayUnifiedOrder;
import net.ymate.platform.log.Logs;
import net.ymate.platform.webmvc.context.WebContext;

public class WxPayHandler implements IWxMimiProgramPayHandler {

    @Override
    public CommonResult checkPay(String attach) throws Exception {
        return null;
    }

    /**
     * 构建订单数据
     *
     * @param accountMeta
     * @param tradeType
     * @param orderId
     * @param attach      userType_action 用户类型_uid_类型
     *                    userType:0粉丝 1技师 2助理技师 3服务人员
     *                    action:0订单支付 1充值 2会费
     * @return
     * @throws Exception
     */
    @Override
    public WxPayUnifiedOrder buildUnifiedOrderRequest(WxPayAccountMeta accountMeta, IWxPay.TradeType tradeType, String orderId, String attach) throws Exception {
        String orderNo = "";
        Long price = 0L;
        Order order = Order.builder().id(orderId).build().load();
        if (order == null) {
            throw new Exception("订单不存在");
        }
        if (Constants.BOOL_TRUE.equals(order.getStatus())) {
            throw new Exception("订单已支付，请勿重复提交");
        }
        Product product = Product.builder().id(order.getProductId()).build().load();
        if (product == null) {
            throw new Exception("产品不存在");
        }
        if (Constants.BOOL_TRUE.equals(product.getIsUse())) {
            throw new Exception("该设备已经被使用le ");
        }
        price = order.getAmount();
        orderNo = order.getId();
        StringBuilder body = new StringBuilder();
        body.append("订单-").append(orderNo);
        String priceString = MathCalcHelper.bind(MathCalcHelper.bind(price.toString()).divide("100").toBlurObject().toDoubleValue()).scale(2).round().toString();
        body.append("金额-").append(priceString);
        return new WxPayUnifiedOrder(accountMeta, body.toString(), orderId, price.intValue(), WebUtils.getRemoteAddr(WebContext.getRequest()), accountMeta.getNotifyUrl(), tradeType.name()).attach(attach);
    }

    @Override
    public void onNotifyReceived(WxPayNotifyResponse notifyData) throws Exception {

        if (org.apache.commons.lang.StringUtils.equalsIgnoreCase("SUCCESS", notifyData.getReturnCode()) &&
                org.apache.commons.lang.StringUtils.equalsIgnoreCase("SUCCESS", notifyData.getResultCode())) {
            Logs.get().getLogger().debug("支付成功");
        }

    }

    @Override
    public boolean onReturnCallback(String orderId) throws Exception {
        return false;
    }

    @Override
    public void onExceptionCaught(Throwable cause) throws Exception {

    }

    @Override
    public String getJsApiTicket(String appId) throws Exception {
        return null;
    }
}
